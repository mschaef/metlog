#! /bin/bash 
### BEGIN INIT INFO
# Provides:          metlog
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Metlog Metrics Vault
# Description:       Metlog is a process for gathering and presenting small
#                    volumes of time series data.
### END INIT INFO

# Author: Mike Schaeffer <mike@mschaef.com>


. /lib/init/vars.sh
. /lib/lsb/init-functions


PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="metlog"
DESC="Metlog Metrics Vault"

SCRIPTNAME=${0##*/}
SCRIPTNAME=${SCRIPTNAME#[SK]??}

JAVA=/usr/bin/java

PIDFILE=/var/run/metlog.pid

AUTHBIND=no

# Metlog Configuration

METLOG_USER=metlog

METLOG_PATH=/home/metlog

METLOG_JAR=/usr/share/metlog/metlog-vault-standalone.jar
METLOG_DB_SUBNAME=metlog-vault
METLOG_HTTP_PORT=8080

JAVA_OPTS=""

# Get to it...

# Exit if not root
if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi

# Exit if the JAVA is not installed
if [ ! -x "$JAVA" ]; then
    echo "The expected JAVA was not found at: $JAVA"
    exit 1
fi

# Exit if the JAR is not installed
if [ ! -r "$METLOG_JAR" ]; then
   echo "The expected Metlog jar was not found at: $METLOG_JAR"
   exit 1
fi

# Read configuration variable file if it is present
[ -r /etc/default/metlog ] && . /etc/default/metlog

JAVA_OPTS="-Ddb.subname=/var/lib/metlog/${METLOG_DB_SUBNAME}"
JAVA_OPTS="$JAVA_OPTS -Dhttp.port=${METLOG_HTTP_PORT}"
JAVA_OPTS="$JAVA_OPTS -Dlogback.configurationFile=/etc/metlog/logback.xml"
JAVA_OPTS="$JAVA_OPTS -jar ${METLOG_JAR}"

if [ "$AUTHBIND" = "yes" -a "$1" = "start" ]; then
   JAVA_OPTS="$JAVA_OPTS -Djava.net.preferIPv4Stack=true"
fi

METLOG_SH="$JAVA $JAVA_OPTS"

if [ "$AUTHBIND" = "yes" -a "$1" = "start" ]; then
   METLOG_SH="/usr/bin/authbind --deep /bin/bash -c '$METLOG_SH'"
fi

#
# Function that starts the daemon/service
#
# Return:
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start()
{
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $JAVA --test > /dev/null \
		|| return 1

	start-stop-daemon --start --quiet --pidfile $PIDFILE  --background \
                      --make-pidfile --chuid ${METLOG_USER} \
                      --exec /bin/bash -- -c "$METLOG_SH" \
		|| return 2
}

#
# Function that stops the daemon/service
#
# Return:
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop()
{
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc -p $PIDFILE "$JAVA" "$NAME" && exit 0 || exit $?
       ;;

  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
        sleep 5 # Should be synchronous wait for shutdown.
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
