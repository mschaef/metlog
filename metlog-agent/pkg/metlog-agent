#! /bin/bash 
### BEGIN INIT INFO
# Provides:          metlog-agent
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Metlog Agent
# Description:       Metlog is a process for gathering samples of time
#                    series data and reporting it to a metlog agent.
### END INIT INFO

# Author: Mike Schaeffer <mike@mschaef.com>

. /lib/init/vars.sh
. /lib/lsb/init-functions

PATH=/sbin:/usr/sbin:/bin:/usr/bin

SCRIPTNAME=${0##*/}
SCRIPTNAME=${SCRIPTNAME#[SK]??}

# Metlog Configuration

SERVICE_NAME=${SCRIPTNAME}
SERVICE_DESC="Metlog Metrics Reporting Agent"

JAVA=/usr/bin/java

PIDFILE=/var/run/${SERVICE_NAME}.pid

JAVA_OPTS=""

METLOG_USER=${SERVICE_NAME}

METLOG_JAR=metlog-agent-standalone.jar
METLOG_VAULT_URL=http://dunitall.com:8080/data
METLOG_CONFIG_PATH=/etc/metlog-agent/config.clj

### Read configuration variable file if it is present

[ -r /etc/default/${SERVICE_NAME} ] && . /etc/default/${SERVICE_NAME}

### Start assembling commands

JAVA_OPTS="-Dvault.url=${METLOG_VAULT_URL}"
JAVA_OPTS="$JAVA_OPTS -Dagent.configurationFile=${METLOG_CONFIG_PATH}"

JAVA_OPTS="$JAVA_OPTS -jar /usr/share/${SERVICE_NAME}/${METLOG_JAR}"

METLOG_SH="$JAVA $JAVA_OPTS >> /var/log/${SERVICE_NAME}/${SERVICE_NAME}-console.log 2>&1"

### Functions

function require_root() {
    if [ `id -u` -ne 0 ]; then
        echo "You need root privileges to run this script"
        exit 1
    fi
}

### Operations

do_start()
{
    require_root
    
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $JAVA --test > /dev/null \
		|| return 1 # daemon was already running

	start-stop-daemon --start --quiet --pidfile $PIDFILE  --background \
                      --make-pidfile --chuid ${METLOG_USER} \
                      --startas /bin/bash -- -c "exec $METLOG_SH" \
		|| return 2 # daemon could not be started
}

do_stop()
{
    require_root
    
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
    
	[ "$RETVAL" = 2 ] && return 2 # daemon could not be stopped

	rm -f $PIDFILE
	return "$RETVAL" # 0 daemon has been stopped, 1  daemon was already stopped
}

### Main command dispatch

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $SERVICE_DESC" "$SERVICE_NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $SERVICE_DESC" "$SERVICE_NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc -p $PIDFILE "$JAVA" "$SERVICE_NAME" && exit 0 || exit $?
       ;;

  restart|force-reload)
	log_daemon_msg "Restarting $SERVICE_DESC" "$SERVICE_NAME"
	do_stop
        sleep 5 # Should be synchronous wait for shutdown.
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
